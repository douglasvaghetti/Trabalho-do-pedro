#include<stdio.h>
#include<string.h>
#include<pthread.h>
#include"communication.h"
#define PORT 50000
#define MAXSIZE 256

void * recebedorConfirm(void * socket){
	char message[MAXSIZE];
	int fdSocket = (int) socket;
	//receiveMessage(fdSocket,message,MAXSIZE*sizeof(char));
	while(1<2){
		receiveMessage(fdSocket,message,MAXSIZE*sizeof(char)); //Recebe mensagem
		printf("Ele(a): %s\n", message);
		if(!strcmp(message, "tchau"))
			break;
		usleep(100);
	}
	printf("acabou recebedor \n");
}

void* enviadorConfirm(void * socket){
	char message[MAXSIZE];
	int fdSocket = (int) socket;
	gets(message);
	while(1<2){
		printf("Você: ");
		scanf("%s",message);
		sendMessage(fdSocket,message,MAXSIZE*sizeof(char)); //Envia mensagem
		if(!strcmp(message, "tchau"))
			break;
		usleep(100);
	}
	printf("acabou enviador \n");
}

void * recebedorDados(void * socket){
	char message[MAXSIZE];
	int fdSocket = (int) socket;
	//receiveMessage(fdSocket,message,MAXSIZE*sizeof(char));
	while(1<2){
		receiveMessage(fdSocket,message,MAXSIZE*sizeof(char)); //Recebe mensagem
		printf("Ele(a): %s\n", message);
		if(!strcmp(message, "tchau"))
			break;
		usleep(100);
	}
	printf("acabou recebedor \n");
}

void* enviadorDados(void * socket){
	char message[MAXSIZE];
	int fdSocket = (int) socket;
	
	
	printf("digite o numero de quadros\n");
	scanf(" %d ",&quadros);
	int inicio=0;
	int fim = 4;
	bool confirmado[quadros];
	for(int x=0;x<quadros;x++){
		confirmado[x]=false;
	}
	while(inicio!=quadros){
		for(int x=inicio;x<fim){
			sendMessage(fdSocket,message,MAXSIZE*sizeof(char)); //Envia mensagem
		}
		usleep(1000);  //timeout 
		double acertos=0;
		bool fail = false;
		for(int x=inicio;x<fim;x++){
			if(confirmado[x]){
				novoInicio++;
				novoFim++;
			}else{
				fail = true;
				break;
			}
		}
		inicio=novoInicio;
		if(!fail)
			fim=novoFim*2;
		else
			fim=novoFim;
	}
	printf("acabou enviador \n");
}

int main(int argc, char *argv[]){

	int mainSocket; //Descritor do socket principal do servidor
	int fdSocket; //Descritor do socket do cliente ou do socket efetivo do servidor

	//Estruturas auxiliares do socket
	struct sockaddr_in socketAddr;
	socklen_t sockLen;

	char message[MAXSIZE]; 	//String para troca de mensagens
	pthread_t threadRecebedor,threadEnviador;
	//Se for servidor
	int quadros;
	if(argc==2){

		sockLen = sizeof(socketAddr);

		mainSocket=openConnection(PORT,0);	//Abre conexão principal
		fdSocket=acceptConnection(mainSocket, sockLen); //Espera por conexões
		
		pthread_create(&threadRecebedor,NULL,&enviadorDados,(void*)fdSocket);
		pthread_create(&threadEnviador,NULL,&recebedorConfirm,(void*)fdSocket);
		
		pthread_join(threadRecebedor,NULL);
		pthread_join(threadEnviador,NULL);
		
		closeConnection(fdSocket); //Fecha socket com o cliente
		closeConnection(mainSocket); //Fecha socket principal

	}
	else{

		fdSocket=tryConnection((char*)"localhost", PORT, 0); //Tenta conectar ao servidor
		
		pthread_create(&threadRecebedor,NULL,&recebedorDados,(void*)fdSocket);
		pthread_create(&threadEnviador,NULL,&enviadorConfirm,(void*)fdSocket);
		pthread_join(threadRecebedor,NULL);
		pthread_join(threadEnviador,NULL);
		
		closeConnection(fdSocket); //Fecha socket com o servidor
	}

	return 0;

}
